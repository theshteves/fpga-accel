module attributes {calyx.entrypoint = "triangle"} {
  calyx.component @triangle(%in0: i32, %clk: i1 {clk}, %reset: i1 {reset}, %go: i1 {go}) -> (%out0: i32, %done: i1 {done}) {
    %true = hw.constant true
    %c0_i32 = hw.constant 0 : i32
    %c1_i32 = hw.constant 1 : i32
    %std_slt_0_reg.in, %std_slt_0_reg.write_en, %std_slt_0_reg.clk, %std_slt_0_reg.reset, %std_slt_0_reg.out, %std_slt_0_reg.done = calyx.register @std_slt_0_reg : i1, i1, i1, i1, i1, i1
    %std_add_2.left, %std_add_2.right, %std_add_2.out = calyx.std_add @std_add_2 : i32, i32, i32
    %std_add_1.left, %std_add_1.right, %std_add_1.out = calyx.std_add @std_add_1 : i32, i32, i32
    %std_slt_0.left, %std_slt_0.right, %std_slt_0.out = calyx.std_slt @std_slt_0 : i32, i32, i1
    %std_add_0.left, %std_add_0.right, %std_add_0.out = calyx.std_add @std_add_0 : i32, i32, i32
    %while_0_arg1_reg.in, %while_0_arg1_reg.write_en, %while_0_arg1_reg.clk, %while_0_arg1_reg.reset, %while_0_arg1_reg.out, %while_0_arg1_reg.done = calyx.register @while_0_arg1_reg : i32, i1, i1, i1, i32, i1
    %while_0_arg0_reg.in, %while_0_arg0_reg.write_en, %while_0_arg0_reg.clk, %while_0_arg0_reg.reset, %while_0_arg0_reg.out, %while_0_arg0_reg.done = calyx.register @while_0_arg0_reg : i32, i1, i1, i1, i32, i1
    %ret_arg0_reg.in, %ret_arg0_reg.write_en, %ret_arg0_reg.clk, %ret_arg0_reg.reset, %ret_arg0_reg.out, %ret_arg0_reg.done = calyx.register @ret_arg0_reg : i32, i1, i1, i1, i32, i1
    calyx.wires {
      calyx.assign %std_slt_0_reg.reset = %reset : i1
      calyx.assign %while_0_arg1_reg.reset = %reset : i1
      calyx.assign %while_0_arg0_reg.reset = %reset : i1
      calyx.assign %ret_arg0_reg.reset = %reset : i1
      %0 = calyx.undef : i1
      %1 = comb.and %while_0_arg1_reg.done, %while_0_arg0_reg.done : i1
      calyx.assign %while_0_arg1_reg.clk = %clk : i1
      calyx.assign %while_0_arg0_reg.clk = %clk : i1
      calyx.assign %ret_arg0_reg.clk = %clk : i1
      calyx.assign %out0 = %ret_arg0_reg.out : i32
      calyx.group @assign_while_0_init_0 {
        %assign_while_0_init_0.go = calyx.group_go %0 : i1
        calyx.assign %while_0_arg0_reg.in = %assign_while_0_init_0.go ? %c1_i32 : i32
        calyx.assign %while_0_arg0_reg.write_en = %assign_while_0_init_0.go ? %true : i1
        calyx.group_done %while_0_arg0_reg.done : i1
      }
      calyx.group @assign_while_0_init_1 {
        %assign_while_0_init_1.go = calyx.group_go %0 : i1
        calyx.assign %while_0_arg1_reg.in = %assign_while_0_init_1.go ? %c0_i32 : i32
        calyx.assign %while_0_arg1_reg.write_en = %assign_while_0_init_1.go ? %true : i1
        calyx.group_done %while_0_arg1_reg.done : i1
      }
      calyx.group @bb0_1 {
        calyx.assign %std_slt_0_reg.in = %std_slt_0.out : i1
        calyx.assign %std_slt_0_reg.write_en = %true : i1
        calyx.assign %std_slt_0.left = %while_0_arg0_reg.out : i32
        calyx.assign %std_slt_0.right = %std_add_0.out : i32
        calyx.assign %std_add_0.left = %in0 : i32
        calyx.assign %std_add_0.right = %c1_i32 : i32
        %2 = comb.and %std_slt_0_reg.done : i1
        calyx.group_done %2 ? %true : i1
      }
      calyx.group @assign_while_0_latch {
        %assign_while_0_latch.go = calyx.group_go %0 : i1
        calyx.assign %while_0_arg0_reg.in = %assign_while_0_latch.go ? %std_add_1.out : i32
        calyx.assign %while_0_arg0_reg.write_en = %assign_while_0_latch.go ? %true : i1
        calyx.assign %while_0_arg1_reg.in = %assign_while_0_latch.go ? %std_add_2.out : i32
        calyx.assign %while_0_arg1_reg.write_en = %assign_while_0_latch.go ? %true : i1
        calyx.assign %std_add_1.left = %assign_while_0_latch.go ? %while_0_arg0_reg.out : i32
        calyx.assign %std_add_1.right = %assign_while_0_latch.go ? %c1_i32 : i32
        calyx.assign %std_add_2.left = %assign_while_0_latch.go ? %while_0_arg1_reg.out : i32
        calyx.assign %std_add_2.right = %assign_while_0_latch.go ? %while_0_arg0_reg.out : i32
        calyx.group_done %1 ? %true : i1
      }
      calyx.group @ret_assign_0 {
        %ret_assign_0.go = calyx.group_go %0 : i1
        calyx.assign %ret_arg0_reg.in = %ret_assign_0.go ? %while_0_arg1_reg.out : i32
        calyx.assign %ret_arg0_reg.write_en = %ret_assign_0.go ? %true : i1
        calyx.group_done %ret_arg0_reg.done : i1
      }
    }
    calyx.control {
      calyx.seq {
        calyx.par {
          calyx.enable @assign_while_0_init_0
          calyx.enable @assign_while_0_init_1
        }
        calyx.enable @bb0_1
        calyx.while %std_slt_0_reg.out {
          calyx.seq {
            calyx.enable @assign_while_0_latch
            calyx.enable @bb0_1
          }
        }
        calyx.enable @ret_assign_0
      }
    }
  } {toplevel}
}

