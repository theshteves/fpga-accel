import "primitives/compile.futil";
import "primitives/binary_operators.futil";
component triangle<"toplevel"=1,>(in0: 32, @clk clk: 1, @reset reset: 1, @go go: 1) -> (out0: 32, @done done: 1) {
  cells {
    std_add_2 = std_add(32);
    std_add_1 = std_add(32);
    std_slt_0 = std_slt(32);
    std_add_0 = std_add(32);
    while_0_arg1_reg = std_reg(32);
    while_0_arg0_reg = std_reg(32);
    ret_arg0_reg = std_reg(32);
  }
  wires {
    out0 = ret_arg0_reg.out;
    group assign_while_0_init_0 {
      while_0_arg0_reg.in = 32'd1;
      while_0_arg0_reg.write_en = 1'd1;
      assign_while_0_init_0[done] = while_0_arg0_reg.done;
    }
    group assign_while_0_init_1 {
      while_0_arg1_reg.in = 32'd0;
      while_0_arg1_reg.write_en = 1'd1;
      assign_while_0_init_1[done] = while_0_arg1_reg.done;
    }
    comb group bb0_1 {
      std_slt_0.left = while_0_arg0_reg.out;
      std_slt_0.right = std_add_0.out;
      std_add_0.left = in0;
      std_add_0.right = 32'd1;
    }
    group assign_while_0_latch {
      while_0_arg0_reg.in = std_add_1.out;
      while_0_arg0_reg.write_en = 1'd1;
      while_0_arg1_reg.in = std_add_2.out;
      while_0_arg1_reg.write_en = 1'd1;
      std_add_1.left = while_0_arg0_reg.out;
      std_add_1.right = 32'd1;
      std_add_2.left = while_0_arg1_reg.out;
      std_add_2.right = while_0_arg0_reg.out;
      assign_while_0_latch[done] = (while_0_arg1_reg.done & while_0_arg0_reg.done) ? 1'd1;
    }
    group ret_assign_0 {
      ret_arg0_reg.in = while_0_arg1_reg.out;
      ret_arg0_reg.write_en = 1'd1;
      ret_assign_0[done] = ret_arg0_reg.done;
    }
  }
  control {
    seq {
      par {
        @pos(0) assign_while_0_init_0;
        @pos(1) assign_while_0_init_1;
      }
      while std_slt_0.out with bb0_1 {
        seq {
          @pos(2) assign_while_0_latch;
        }
      }
      @pos(3) ret_assign_0;
    }
  }
}

metadata #{
0: loc("tri.cgeist.stripped-module.scf-for-to-while.mlir":8:12)
1: loc("tri.cgeist.stripped-module.scf-for-to-while.mlir":8:12)
2: loc("tri.cgeist.stripped-module.scf-for-to-while.mlir":8:12)
3: loc("tri.cgeist.stripped-module.scf-for-to-while.mlir":18:5)
}#
